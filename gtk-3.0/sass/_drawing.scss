// Drawing mixins

// generic drawing of more complex things

// Solid color image
@function _solid($c) {
  @return linear-gradient(to bottom, $c, $c);
}

// Entries

@mixin entry($t) {
//
// Entries drawing function
//
// $t: entry type
//

  @if $t==normal {
  //
  // normal entry
  //
    color: $text_color;
    border-color: $entry_border;
    background-color: $entry_bg;
  }

  @if $t==focus {
  //
  // focused entry
  //
    color: $text_color;
    border-color: $accent_color;
    background-color: $entry_bg;
  }

  @if $t==insensitive {
  //
  // insensitive entry
  //
    color: $insensitive_fg_color;
    border-color: $insensitive_border_color;
    background-color: $insensitive_bg_color;
  }

  @if $t==header-normal {
  //
  // normal header-bar entry
  //

    color: $header_fg;
    border-color: $header_entry_border;
    background-color: $header_entry_bg;

    image, image:hover { color: inherit; }
  }

  @if $t==header-focus {
  //
  // focused header-bar entry
  //
    color: $header_fg;
    border-color: $accent_color;
    background-color: $header_entry_bg;
  }

  @if $t==header-insensitive {
  //
  // insensitive header-bar entry
  //
    color: $insensitive_fg_color;
    background-color: $insensitive_bg_color;
  }

  @else if $t==osd {
  //
  // normal osd entry
  //
    color: $osd_fg_color;
    border-color: $osd_entry_border;
    background-color: $osd_entry_bg;

    image, image:hover { color: inherit; }
  }

  @else if $t==osd-focus {
  //
  // active osd entry
  //
    color: $selected_fg_color;
    border-color: $accent_color;
    background-color: $osd_entry_bg;
  }

  @else if $t==osd-insensitive {
  //
  // insensitive osd entry
  //
    color: $osd_insensitive_fg_color;
    background-color: $osd_insensitive_bg_color;
  }
}

// Buttons

@mixin button($t, $actionb_color:red) {
//
// Button drawing function
//
// $t:    button type,
// $actionb_color: used for destructive and suggested action buttons

  @if $t==normal {
  //
  // normal button
  //
    color: $button_fg;
    background-color: $button_bg;
    border-color: $button_border;
  }

  @else if $t==hover {
  //
  // hovered button
  //
    color: $button_hover_fg;
    background-color: $button_hover_bg;
    border-color: $button_hover_border;
  }

  @else if $t==active {
  //
  // pushed button
  //
    color: $button_active_fg;
    background-color: $button_active_bg;
    border-color: $button_active_border;
  }

  @else if $t==insensitive {
  //
  // insensitive button
  //
    color: $insensitive_fg_color;
    background-color: $insensitive_bg_color;
    border-color: $insensitive_border_color;

    label { color: inherit; }
  }

  @else if $t==insensitive-active {
  //
  // insensitive pushed button
  //
    color: $button_active_fg;
    background-color: $button_active_bg;
    border-color: $button_active_border;

    opacity: 0.5;

    label { color: inherit; }
  }

  @else if $t==header-normal {
  //
  // normal header-bar button
  //
    color: $button_fg;
    background-color: $header_button_bg;
    border-color: $header_button_border;
  }

  @else if $t==header-hover {
  //
  // hovered header-bar button
  //
    color: $button_hover_fg;
    background-color: $header_button_hover_bg;
    border-color: $header_button_border;
  }

  @else if $t==header-active {
  //
  // pushed header-bar button
  //
    color: $button_active_fg;
    background-color: $button_active_bg;
    border-color: $button_active_border;
  }

  @else if $t==header-insensitive {
  //
  // insensitive header-bar button
  //
    color: $insensitive_fg_color;
    background-color: $insensitive_bg_color;
    border-color: $insensitive_border_color;

    label { color: inherit; }
  }

  @else if $t==header-insensitive-active {
  //
  // header-bar insensitive pushed button
  //
    color: $button_active_fg;
    background-color: $button_active_bg;
    border-color: $button_active_border;

    opacity: 0.5;

    label { color: inherit; }
  }

  @else if $t==osd {
  //
  // normal osd button
  //
    color: $osd_fg_color;
    outline-color: transparentize($osd_fg_color, 0.7);
    border-color: $osd_button_border;
    background-color: $osd_button_bg;
  }

  @else if $t==osd-hover {
  //
  // active osd button
  //
    color: $osd_fg_color;
    outline-color: transparentize($osd_fg_color, 0.7);
    border-color: $osd_button_border;
    background-color: opacify(lighten($osd_button_bg, 7%), 0.1);
  }

  @else if $t==osd-active {
  //
  // active osd button
  //
    color: $osd_fg_color;
    outline-color: transparentize($osd_fg_color, 0.7);
    border-color: $osd_button_border;
    background-color: transparentize(black, 0.85);
  }

  @else if $t==osd-insensitive {
  //
  // insensitive osd button
  //
    color: $osd_insensitive_fg_color;
    border-color: $osd_button_border;
    background-color: transparentize($osd_button_bg, 0.15);
  }

  @else if $t==suggested_destructive {
  //
  // suggested or destructive action buttons
  //
    background-clip: border-box;

    color: $selected_fg_color;
    outline-color: transparentize($selected_fg_color, 0.7);
    background-color: $actionb_color;
    border-color: $actionb_color;
  }

  @else if $t==undecorated {
  //
  // reset
  //
    border-color: transparent;
    background-color: transparent;
    background-image: none;
  }
}

//
// Titlebar circular buttons
//
@mixin draw_circle($c) {
  background-image: -gtk-gradient(radial,
                                  center center, 0,
                                  center center, 0.5,
                                  to($c),
                                  to(transparent));
}

//
// Overshoot
//
@mixin overshoot($p, $t: normal, $c: $text_color) {
	//
	// overshoot
	//
	// $p: position
	// $t: type
	// $c: base color
	//
	// possible $p values:
	// top, bottom, right, left
	//
	// possible $t values:
	// normal, backdrop
	//

	$_small_gradient_length: 5%;
	$_big_gradient_length: 100%;

	$_position: center top;
	$_small_gradient_size: 100% $_small_gradient_length;
	$_big_gradient_size: 100% $_big_gradient_length;

	@if $p==bottom {
		$_position: center bottom;
		$_linear_gradient_direction: to top;
	} @else if $p==right {
		$_position: right center;
		$_small_gradient_size: $_small_gradient_length 100%;
		$_big_gradient_size: $_big_gradient_length 100%;
	} @else if $p==left {
		$_position: left center;
		$_small_gradient_size: $_small_gradient_length 100%;
		$_big_gradient_size: $_big_gradient_length 100%;
	}

	$_small_gradient_color: $c;
	$_big_gradient_color: $c;

	@if $c==$text_color {
		$_small_gradient_color: $borders_color;
		$_big_gradient_color: $text_color;

		@if $t==backdrop {
			$_small_gradient_color: $fill;
		}
	}

	$_small_gradient: -gtk-gradient(
		radial,
		$_position,
		0,
		$_position,
		0.5,
		to($_small_gradient_color),
		to(rgba($_small_gradient_color, 0))
	);

	$_big_gradient: -gtk-gradient(
		radial,
		$_position,
		0,
		$_position,
		0.6,
		from(rgba($_big_gradient_color, 0.07)),
		to(rgba($_big_gradient_color, 0))
	);

	@if $t==normal {
		background-image: $_small_gradient, $_big_gradient;
		background-size: $_small_gradient_size, $_big_gradient_size;
	} @else if $t==backdrop {
		background-image: $_small_gradient;
		background-size: $_small_gradient_size;
	}

	background-repeat: no-repeat;
	background-position: $_position;

	background-color: transparent; // reset some properties to be sure to not inherit them somehow
	border: none; //
	box-shadow: none; //
}
